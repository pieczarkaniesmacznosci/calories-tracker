// <auto-generated />
using System;
using Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(CaloriesLibraryContext))]
    partial class CaloriesLibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data.Entities.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateEaten")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSaved")
                        .HasColumnType("bit");

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Meals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsSaved = false,
                            MealName = "Initial meal",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateEaten = new DateTime(2023, 11, 27, 22, 32, 2, 117, DateTimeKind.Local).AddTicks(5913),
                            IsSaved = true,
                            MealName = "Chicken stew",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Data.Entities.MealLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateEaten")
                        .HasColumnType("datetime2");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("UserId");

                    b.ToTable("MealLogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateEaten = new DateTime(2023, 11, 27, 22, 32, 2, 117, DateTimeKind.Local).AddTicks(5925),
                            MealId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateEaten = new DateTime(2023, 11, 26, 22, 32, 2, 117, DateTimeKind.Local).AddTicks(5927),
                            MealId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateEaten = new DateTime(2023, 11, 25, 22, 32, 2, 117, DateTimeKind.Local).AddTicks(5928),
                            MealId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Data.Entities.MealProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("ProductId");

                    b.ToTable("MealProduct");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MealId = 1,
                            ProductId = 1,
                            Weight = 200.0
                        },
                        new
                        {
                            Id = 2,
                            MealId = 1,
                            ProductId = 2,
                            Weight = 60.0
                        },
                        new
                        {
                            Id = 3,
                            MealId = 1,
                            ProductId = 4,
                            Weight = 35.0
                        },
                        new
                        {
                            Id = 4,
                            MealId = 2,
                            ProductId = 1,
                            Weight = 132.0
                        },
                        new
                        {
                            Id = 5,
                            MealId = 2,
                            ProductId = 2,
                            Weight = 250.0
                        },
                        new
                        {
                            Id = 6,
                            MealId = 2,
                            ProductId = 4,
                            Weight = 95.0
                        });
                });

            modelBuilder.Entity("Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<double>("Fat")
                        .HasColumnType("float");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<double>("Kcal")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Protein")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Carbohydrates = 0.0,
                            DateAdded = new DateTime(2023, 11, 27, 22, 32, 2, 117, DateTimeKind.Local).AddTicks(5846),
                            Fat = 3.0,
                            IsAvailable = true,
                            IsDefault = true,
                            Kcal = 111.0,
                            Name = "Chicken",
                            Protein = 21.0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Carbohydrates = 76.599999999999994,
                            DateAdded = new DateTime(2023, 11, 27, 22, 32, 2, 117, DateTimeKind.Local).AddTicks(5881),
                            Fat = 0.69999999999999996,
                            IsAvailable = true,
                            IsDefault = true,
                            Kcal = 339.5,
                            Name = "Rice",
                            Protein = 6.7000000000000002,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Carbohydrates = 51.100000000000001,
                            DateAdded = new DateTime(2023, 11, 27, 22, 32, 2, 117, DateTimeKind.Local).AddTicks(5883),
                            Fat = 38.399999999999999,
                            IsAvailable = true,
                            IsDefault = true,
                            Kcal = 580.79999999999995,
                            Name = "Milky Chocolate",
                            Protein = 7.7000000000000002,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Carbohydrates = 52.5,
                            DateAdded = new DateTime(2023, 11, 27, 22, 32, 2, 117, DateTimeKind.Local).AddTicks(5884),
                            Fat = 1.3,
                            IsAvailable = true,
                            IsDefault = true,
                            Kcal = 237.69999999999999,
                            Name = "White bread",
                            Protein = 4.0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Carbohydrates = 20.0,
                            DateAdded = new DateTime(2023, 11, 27, 22, 32, 2, 117, DateTimeKind.Local).AddTicks(5886),
                            Fat = 0.90000000000000002,
                            IsAvailable = true,
                            IsDefault = true,
                            Kcal = 94.5,
                            Name = "Tomato ketchup",
                            Protein = 1.6000000000000001,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            Carbohydrates = 0.10000000000000001,
                            DateAdded = new DateTime(2023, 11, 27, 22, 32, 2, 117, DateTimeKind.Local).AddTicks(5887),
                            Fat = 20.699999999999999,
                            IsAvailable = true,
                            IsDefault = true,
                            Kcal = 288.69999999999999,
                            Name = "Gouda cheese",
                            Protein = 25.5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            Carbohydrates = 4.4000000000000004,
                            DateAdded = new DateTime(2023, 11, 27, 22, 32, 2, 117, DateTimeKind.Local).AddTicks(5889),
                            Fat = 0.5,
                            IsAvailable = true,
                            IsDefault = true,
                            Kcal = 28.899999999999999,
                            Name = "Passata - Sottile Gusto",
                            Protein = 1.7,
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            Carbohydrates = 4.7000000000000002,
                            DateAdded = new DateTime(2023, 11, 27, 22, 32, 2, 117, DateTimeKind.Local).AddTicks(5891),
                            Fat = 0.40000000000000002,
                            IsAvailable = false,
                            IsDefault = true,
                            Kcal = 27.199999999999999,
                            Name = "Onion",
                            Protein = 1.2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            Carbohydrates = 0.0,
                            DateAdded = new DateTime(2023, 11, 27, 22, 32, 2, 117, DateTimeKind.Local).AddTicks(5893),
                            Fat = 2.2999999999999998,
                            IsAvailable = true,
                            IsDefault = true,
                            Kcal = 107.8,
                            Name = "Beef",
                            Protein = 20.100000000000001,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            Carbohydrates = 0.0,
                            DateAdded = new DateTime(2023, 11, 27, 22, 32, 2, 117, DateTimeKind.Local).AddTicks(5895),
                            Fat = 3.0,
                            IsAvailable = true,
                            IsDefault = false,
                            Kcal = 123.0,
                            Name = "Turkey",
                            Protein = 21.0,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "0e501356-d541-4046-a68b-4b69e54efdd6",
                            Description = "Administration role",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "fa4c858e-43fe-44cc-b839-7ed95380cc4d",
                            Description = "User role",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9704633c-83f1-445c-a121-64172c1cdfd5",
                            Email = "admin@tracly.com",
                            EmailConfirmed = false,
                            FirstName = "Mike",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@TRACLY.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOlRiDLN/J1Lxjp+MZhw2P3yID9I6YJUFCe+GZiaXFh203QZ/i9rjT7ZtDLATYARqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20d35364-f1e9-482e-b431-159a120d6362",
                            TwoFactorEnabled = false,
                            UserName = "admin@tracly.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45fde987-15bc-4ee4-a5e4-44946260923a",
                            Email = "user@tracly.com",
                            EmailConfirmed = false,
                            FirstName = "Dave",
                            LastName = "Murray",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER@TRACLY.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEtb3P8WGbjT6+h/NF2LFyCg+o7Bj7jbuTQc0xCbgYpzLJVBw0FxdN/6zGPBj0ht9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9806488-96b8-4245-95f2-23a196e32de4",
                            TwoFactorEnabled = false,
                            UserName = "user@tracly.com"
                        });
                });

            modelBuilder.Entity("Data.Entities.UserNutrition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Fat")
                        .HasColumnType("float");

                    b.Property<double>("Kcal")
                        .HasColumnType("float");

                    b.Property<double>("Protein")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserNutritions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Carbohydrates = 246.0,
                            Date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fat = 57.509999999999998,
                            Kcal = 2070.0,
                            Protein = 142.0,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Data.Entities.UserWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserWeights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            Weight = 71.5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            Id = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2,
                            Id = 2
                        });
                });

            modelBuilder.Entity("Data.Entities.Meal", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("Meals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.MealLog", b =>
                {
                    b.HasOne("Data.Entities.Meal", "Meal")
                        .WithMany("MealLogs")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("MealLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.MealProduct", b =>
                {
                    b.HasOne("Data.Entities.Meal", "Meal")
                        .WithMany("MealProducts")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Data.Entities.Product", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.UserNutrition", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("UserNutritions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.UserWeight", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("UserWeights")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Meal", b =>
                {
                    b.Navigation("MealLogs");

                    b.Navigation("MealProducts");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("MealLogs");

                    b.Navigation("Meals");

                    b.Navigation("Products");

                    b.Navigation("UserNutritions");

                    b.Navigation("UserWeights");
                });
#pragma warning restore 612, 618
        }
    }
}
